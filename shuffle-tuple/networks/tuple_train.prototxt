name: "CaffeNet"
layer {
   name: "label-data"
   top: "im1"
   top: "im2"
   top: "im3"
   top: "label"
   type: "Python"
   python_param {
       module: "python_layers.multiple_image_multiple_label_data_layer"
       layer: "MultipleImageMultipleLabelDataLayer"
#batch_size
       param_str: "{ 'keys_file': '../genData/ucf101/MID_MD_par/train01_image_keys.txt', 'data_shapes' : [[32,3,227,227],[32,3,227,227],[32,3,227,227],[32,1,1,1]], 'label_files' : [], 'txt_files': ['./train01_image_labs.txt'], 'image_dir' : '/usr1/imisra/datasets/ucf101/rszMax340', 'image_ext' : '.jpg', bgr_mean: [103.939, 116.779, 123.68], 'top_dtypes': ['im','im','im','txt'], 'prefetch_size': 10, 'shuffle': False }"
    }
    include { phase: TRAIN  }
}
layer {
    name: "im1"
    top: "im1"
    type: "DummyData"
    dummy_data_param { shape {dim: 32 dim: 3 dim: 227 dim: 227 }   }
    include { phase: TEST  }
}
layer {
    name: "im2"
    top: "im2"
    type: "DummyData"
    dummy_data_param { shape {dim: 32 dim: 3 dim: 227 dim: 227 }   }
    include { phase: TEST  }
}
layer {
    name: "im3"
    top: "im3"
    type: "DummyData"
    dummy_data_param { shape {dim: 32 dim: 3 dim: 227 dim: 227 }   }
    include { phase: TEST  }
}

layer {
    name: "im_concat" top: "im_concat" bottom: "im1" bottom: "im2" bottom: "im3" type: "Concat"
    concat_param {axis: 0 }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "im_concat"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {  name: "batch_norm_3"   type: "BatchNorm"  bottom: "conv3"   top: "conv3" 
param { lr_mult: 0} param {lr_mult: 0} param {lr_mult: 0} }
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {  name: "batch_norm_4"   type: "BatchNorm"  bottom: "conv4"   top: "conv4" 
param { lr_mult: 0} param {lr_mult: 0} param {lr_mult: 0} }
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {  name: "batch_norm_5"   type: "BatchNorm"  bottom: "conv5"   top: "conv5" 
param { lr_mult: 0} param {lr_mult: 0} param {lr_mult: 0} }
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {  name: "batch_norm_6"   type: "BatchNorm"  bottom: "fc6"   top: "fc6" 
param { lr_mult: 0} param {lr_mult: 0} param {lr_mult: 0} }
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {  name: "batch_norm_7"   type: "BatchNorm"  bottom: "fc7"   top: "fc7" 
param { lr_mult: 0} param {lr_mult: 0} param {lr_mult: 0} }
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
    name: "fc7_split" top: "fc7_split0" top: "fc7_split1" top: "fc7_split2"  bottom: "fc7"
    type: "Slice"
#batch_size
    slice_param { axis: 0 slice_point: 32 slice_point: 64  }
}

layer {
    name: "fc7_concat" top: "fc7_concat"  bottom: "fc7_split0" bottom: "fc7_split1" bottom: "fc7_split2"
    type: "Concat"
    concat_param { axis: 1 }
}
layer {
  name: "fc8_tri"
  type: "InnerProduct"
  bottom: "fc7_concat"
  top: "fc8_tri"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }   
  }
}
layer {
  name: "triloss"
  type: "SoftmaxWithLoss"
  bottom: "fc8_tri"
  bottom: "label"
  top: "loss"
  include { phase: TRAIN  }
}
layer {
  name: "prob"
  top: "prob"
  type: "Softmax"
  bottom: "fc8_tri"
}
layer {
  name: "loss_tracker"
  type: "Python"
  python_param {
       module: "python_layers.loss_tracking_layer"
       layer: "LossTrackingLayer"
  }
  bottom: "prob"
  bottom: "label"
  top: "fake"
  include { phase: TRAIN  }
}
